{
	"info": {
		"_postman_id": "d1ce3c41-d64e-4f59-9b96-9b55a21e2a8a",
		"name": "MishkaCms",
		"description": "Mishka project is a real-time and also API-based CMS which is developed using [Elixir](https://elixir-lang.org/) programming language; powered by [Phoenix framework](https://phoenixframework.org/). In this project it is tried to place all the dependencies in the Elixir language and avoid using external systems, and it has been this way so far except for the database section which we used [PostgreSQL](https://www.postgresql.org/).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "MishkaAPI",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "full_name",
											"value": "{{testFullName}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{testUsername}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{testMailAddress}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{testPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"register"
									]
								},
								"description": "With this endpoint, you can register in the CMS; it should be noted that you can keep the password field empty, but you cannot log in from a common way, something like user and email + password.  \nHence, there is a way to log in through social networks like GitHub and Google."
							},
							"response": []
						},
						{
							"name": "Login (Username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"accessToken\", jsonData.auth.access_token);",
											"    pm.collectionVariables.set(\"refreshToken\", jsonData.auth.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{testUsername}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{testPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"login"
									]
								},
								"description": "You can just log in for 5 times, after that the system do not let you before disconnecting from some of your previous token."
							},
							"response": []
						},
						{
							"name": "Login (Email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"accessToken\", jsonData.auth.access_token);",
											"    pm.collectionVariables.set(\"refreshToken\", jsonData.auth.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "{{testMailAddress}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{testPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"login"
									]
								},
								"description": "You can just log in for 5 times, after that the system do not let you before disconnecting from some of your previous token."
							},
							"response": []
						},
						{
							"name": "Send Verify Email code",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "code",
											"value": "some_thing",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/verify-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"verify-email"
									]
								},
								"description": "It should be noted, when you are using code instead of URL, you need a good reason like using API side not HTML render.\n\nIt should be noted that you can apply once every six minutes."
							},
							"response": []
						},
						{
							"name": "Verify Email",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/v1/verify-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"verify-email"
									]
								},
								"description": "It should be noted, when you are using code instead of URL, you need a good reason like using API side not HTML render.\n\nIt should be noted that you can apply once every six minutes."
							},
							"response": []
						},
						{
							"name": "Verify Email by Email Link",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/v1/verify-email-by-email-link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"verify-email-by-email-link"
									]
								},
								"description": "It should be noted that you can apply once every six minutes."
							},
							"response": []
						},
						{
							"name": "Edit Profile (Full Name)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "full_name",
											"value": "newTestFullName",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/edit-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"edit-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "curent_password",
											"value": "{{testPassword}}",
											"type": "text"
										},
										{
											"key": "new_password",
											"value": "{{testPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"change-password"
									]
								},
								"description": "All of your tokens or logged in account are forced to be disconnected after changing your password. It needs access token."
							},
							"response": []
						},
						{
							"name": "Send Reset Password code",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "{{testMailAddress}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"reset-password"
									]
								},
								"description": "This endpoint is like change password router, but you need to send code to your email and after that you can reset your password, but do not forget after changing password all your devices and token are going to be disconnected."
							},
							"response": []
						},
						{
							"name": "Reset Password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "{{testMailAddress}}",
											"type": "text"
										},
										{
											"key": "new_password",
											"value": "{{testPassword}}",
											"type": "text"
										},
										{
											"key": "code",
											"value": "something",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"reset-password"
									]
								},
								"description": "This endpoint is like change password router, but you need to send code to your email and after that you can reset your password, but do not forget after changing password all your devices and token are going to be disconnected."
							},
							"response": []
						},
						{
							"name": "User Tokens",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/v1/user-tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"user-tokens"
									]
								},
								"description": "This action just shows you how many tokens are created for your account and what are their expiry time and the other information.  \nIt does not show the tokens."
							},
							"response": []
						},
						{
							"name": "Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"accessToken\", jsonData.auth.access_token);",
											"    pm.collectionVariables.set(\"refreshToken\", jsonData.auth.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refreshToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"refresh-token"
									]
								},
								"description": "Every time you refresh your token, it gives you an access token and a new refresh token, hence the system always considers a last token and the others you created will be gone."
							},
							"response": []
						},
						{
							"name": "Get Token Expire Time",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{refreshToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/get-token-expire-time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"get-token-expire-time"
									]
								},
								"description": "You can see the expiration of a token when its token has not yet expired\n\n**It doesn't matter you want to see refresh token expiration or access token, you must have a valid access token.**"
							},
							"response": []
						},
						{
							"name": "Delete Token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/delete-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"delete-token"
									]
								},
								"description": "When you delete a token which is access, you should create a new one by refresh token if you want to use it to another endpoint."
							},
							"response": []
						},
						{
							"name": "Delete Tokens",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/delete-tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"delete-tokens"
									]
								},
								"description": "When you call delete tokens, you are going to delete all the tokens even refresh token, hence all your devices are disconnected logically."
							},
							"response": []
						},
						{
							"name": "Delete Tokens Link by Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "{{testMailAddress}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/send-delete-tokens-link-by-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"send-delete-tokens-link-by-email"
									]
								},
								"description": "It should be used when user does not access to his/her password"
							},
							"response": []
						},
						{
							"name": "Deactive Account by Email Link",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/v1/deactive-account-by-email-link",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"deactive-account-by-email-link"
									]
								},
								"description": "For your current position, we just can send an email to user and after hitting link by user, the system just change his/her account status, not to delete information of user.  \nWe will complete this in the future"
							},
							"response": []
						},
						{
							"name": "Send Deactive Account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/v1/deactive-account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"deactive-account"
									]
								},
								"description": "This is a launcher for sending email, a code to user"
							},
							"response": []
						},
						{
							"name": "Deactive Account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "code",
											"value": "something",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/deactive-account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"deactive-account"
									]
								},
								"description": "For your current position, we just can send an email to user and after hitting link by user, the system just change his/her account status, not to delete information of user.  \nWe will complete this in the future"
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refreshToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/auth/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"v1",
										"logout"
									]
								},
								"description": "After you log out from the system, it deletes your device tokens which include access and refresh, the other devices still work."
							},
							"response": []
						}
					],
					"description": "`MishkaCMS` Authentication API",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Content",
					"item": [
						{
							"name": "Create Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"categoryID\", jsonData.category_info.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Category test",
											"type": "text"
										},
										{
											"key": "short_description",
											"value": "This is a test text for a Category API",
											"type": "text"
										},
										{
											"key": "main_image",
											"value": "../test.png",
											"type": "text"
										},
										{
											"key": "header_image",
											"value": "../test.png",
											"type": "text"
										},
										{
											"key": "description",
											"value": "This is a test text for a Category API",
											"type": "text"
										},
										{
											"key": "alias_link",
											"value": "test-category",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/create-category",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"create-category"
									]
								},
								"description": "The first step of publishing a post is category creation, hence you need to be authorized. The action of this part is `blog:edit`\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Edit category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "{{categoryID}}",
											"type": "text"
										},
										{
											"key": "title",
											"value": "Category test edit",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/edit-category",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"edit-category"
									]
								},
								"description": "After creating a category, this endpoint helps you to edit this every time, but you need to be authorized. The action of this part is \\`blog:edit\\`\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "{{categoryID}}",
											"type": "text"
										},
										{
											"key": "title",
											"value": "test2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/delete-category",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"delete-category"
									]
								},
								"description": "After creating a category, this endpoint helps you to change status of a post to `soft_delete` this every time, but you need to be authorized. The action of this part is `blog:edit`  \nit does not delete your post from database.\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Destroy Category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "{{categoryID}}",
											"type": "text"
										},
										{
											"key": "title",
											"value": "test2",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/destroy-category",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"destroy-category"
									]
								},
								"description": "After creating a category, this endpoint helps you to delete a post every time you want, but you need to be authorized. The action of this part is `blog:edit`  \nit deletes your post from database and you cannot undo.\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "category_id",
											"value": "{{categoryID}}",
											"type": "text"
										},
										{
											"key": "alias_link",
											"value": "trahi-sakhte-rahbordi4",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/category",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"category"
									]
								},
								"description": "This endpoint helps you to a category and it's information of the `cms`.\n\n*   Does not need any ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Categories",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filters\": {\n        \"status\": \"active\",\n        \"show_location\": true\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"categories"
									]
								},
								"description": "This endpoint helps you to show all categories and their information of the `cms`.\n\n*   Does not need any ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"postID\", jsonData.post_info.id);",
											"    pm.collectionVariables.set(\"postAliasLink\", jsonData.post_info.alias_link);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "this is a post test title",
											"type": "text"
										},
										{
											"key": "short_description",
											"value": "this is a post short description",
											"type": "text"
										},
										{
											"key": "main_image",
											"value": "../image.png",
											"type": "text"
										},
										{
											"key": "header_image",
											"value": "../image.png",
											"type": "text"
										},
										{
											"key": "description",
											"value": "this is a post description",
											"type": "text"
										},
										{
											"key": "alias_link",
											"value": "post-2-test",
											"type": "text"
										},
										{
											"key": "category_id",
											"value": "{{categoryID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/create-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"create-post"
									]
								},
								"description": "It should be noted that your content management at least needs one category to let you create a new post. Every new post should have a CategoryID\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Edit Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "edited post 1",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{postID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/edit-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"edit-post"
									]
								},
								"description": "*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Delete Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "post_id",
											"value": "{{postID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/delete-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"delete-post"
									]
								},
								"description": "*   Needs ACL\n*   Needs access token\n*   It just edits the post status to `soft_delete`, it does not delete your post from database."
							},
							"response": []
						},
						{
							"name": "Destroy Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "post_id",
											"value": "{{postID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/destroy-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"destroy-post"
									]
								},
								"description": "*   Needs ACL\n*   Needs access token\n*   It deletes your post from database"
							},
							"response": []
						},
						{
							"name": "Posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"page\": 1,\n    \"filters\": {\n        \"status\": \"active\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"posts"
									]
								},
								"description": "This endpoint helps you to see information of all post were created\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "alias_link",
											"value": "{{postAliasLink}}",
											"type": "text"
										},
										{
											"key": "status",
											"value": "active",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"post"
									]
								},
								"description": "This endpoint helps you to see information of a post were created\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"commentID\", jsonData.comment_info.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "section_id",
											"value": "{{postID}}",
											"type": "text"
										},
										{
											"key": "description",
											"value": "this is a test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/create-comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"create-comment"
									]
								},
								"description": "This endpoint helps you to send a comment for a post.\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filters\": {\n        \"comment_id\": \"{{commentAliasLink}}\",\n        \"status\": \"active\",\n        \"section\": \"blog_post\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"comment"
									]
								},
								"description": "This endpoint helps you to see information of a comment.\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Comments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"page\": 1,\n    \"filters\": {\n        \"id\": \"{{commentID}}\",\n        \"status\": \"active\",\n        \"section\": \"blog_post\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"comments"
									]
								},
								"description": "This endpoint helps you to see information of comments.\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Editor Post with comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alias_link\": \"{{postAliasLink}}\",\n    \"status\": \"active\",\n    \"comment\": {\n        \"page\": \"1\",\n        \"filters\": {\n            \"section_id\": \"{{postID}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/editor-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"editor-post"
									]
								},
								"description": "This endpoint needs `blog:editor` promotion to let you send request, hence change your test user role before testing.\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Editor Post without comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alias_link\": \"{{postAliasLink}}\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/editor-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"editor-post"
									]
								},
								"description": "This endpoint needs `blog:editor` promotion to let you send request, hence change your test user role before testing.\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Editor Posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"page\": \"1\",\n    \"filters\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/editor-posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"editor-posts"
									]
								},
								"description": "This endpoint needs `blog:editor` promotion to let you send request, hence change your test user role before testing.\n\n*   Needs ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "Like Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "post_id",
											"value": "{{postID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/like-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"like-post"
									]
								},
								"description": "This endpoint helps you to like a post\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						},
						{
							"name": "UnLike Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "post_id",
											"value": "{{postID}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/delete-like-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"delete-like-post"
									]
								},
								"description": "This endpoint helps you to unlike a post\n\n*   Does not need ACL\n*   Needs access token"
							},
							"response": []
						}
					],
					"description": "`MishkaCms` Content API\n\n``` erlang\n# We have PostMan for these routers\ndef create_category(conn, params) do\ndef edit_category(conn, %{\"category_id\" => category_id})\ndef delete_category(conn, %{\"category_id\" => category_id})\ndef destroy_category(conn, %{\"category_id\" => category_id}) \ndef category(conn, %{\"category_id\" => id})\ndef category(conn, %{\"alias_link\" => alias_link})\ndef categories(conn, _params) # It loads all categories without paginate\ndef create_post(conn, params)\ndef edit_post(conn, %{\"post_id\" => post_id})\ndef delete_post(conn, %{\"post_id\" => post_id})\ndef destroy_post(conn, %{\"post_id\" => post_id}) \ndef posts(conn, %{\"page\" => page, \"filters\" => %{\"status\" => status}})  when status in [\"active\", \"archived\"] do\ndef post(conn, %{\"alias_link\" => alias_link, \"status\" => status, \"comment\" => %{\"page\" => _page, \"filters\" => %{\"status\" => status}}}) when status in [\"active\", \"archive\"]\ndef post(conn, %{\"alias_link\" => alias_link, \"status\" => status}) when status in [\"active\", \"archived\"]\ndef create_comment(conn, %{\"section_id\" => _section_id, \"description\" => _description})\ndef comment(conn, %{\"filters\" => %{\"comment_id\" => comment_id, \"status\" => status}}) when status in [\"active\", \"archived\"]\ndef comments(conn, %{\"page\" => page, \"filters\" => %{\"status\" => status} = params}) when status in [\"active\", \"archived\"]\n# We have no PostMan for these routers\ndef editor_post(conn, %{\"alias_link\" => alias_link, \"status\" => status, \"comment\" => %{\"page\" => _page, \"filters\" => _filters}})\ndef editor_post(conn, %{\"post_id\" => post_id, \"status\" => status})\ndef editor_posts(conn, %{\"page\" => page, \"filters\" => params})\ndef editor_post(conn, %{\"alias_link\" => alias_link, \"status\" => status, \"comment\" => %{\"page\" => _page, \"filters\" => _filters}})\ndef editor_post(conn, %{\"post_id\" => post_id, \"status\" => status})\ndef like_post(conn, %{\"post_id\" => post_id})\ndef delete_post_like(conn, %{\"post_id\" => post_id})\ndef editor_categories(conn, %{\"filters\" => params}) when is_map(params)\ndef editor_comment(conn, %{\"filters\" => params})\ndef editor_comments(conn, %{\"page\" => page, \"filters\" => params})\ndef edit_comment(conn, params)\ndef delete_comment(conn, %{\"comment_id\" => comment_id})\ndef delete_comment(conn, %{\"user_id\" => user_id,\"comment_id\" => comment_id})\ndef destroy_comment(conn, %{\"comment_id\" => comment_id})\ndef like_comment(conn, %{\"comment_id\" => comment_id})\ndef delete_comment_like(conn, %{\"comment_id\" => comment_id})\ndef create_tag(conn, %{\"title\" => _title, \"alias_link\" => _alias_link, \"robots\" => _robots})\ndef edit_tag(conn, %{\"tag_id\" => tag_id})\ndef delete_tag(conn, %{\"tag_id\" => tag_id})\ndef add_tag_to_post(conn, %{\"post_id\" => post_id, \"tag_id\" => tag_id})\ndef remove_post_tag(conn, %{\"post_id\" => post_id, \"tag_id\" => tag_id})\ndef tags(conn, %{\"page\" => page, \"filters\" => params})\ndef post_tags(conn, %{\"post_id\" => post_id})d\ndef tag_posts(conn, %{\"page\" => page, \"filters\" => %{\"post_status\" => post_status} = params}) when post_status in [\"active\", \"archived\"]\ndef editor_tag_posts(conn, %{\"page\" => page, \"filters\" => params})\ndef create_bookmark(conn, %{\"section\" => section, \"section_id\" => section_id})\ndef delete_bookmark(conn, %{\"section_id\" => section_id})\ndef create_subscription(conn, %{\"section\" => section, \"section_id\" => section_id})\ndef delete_subscription(conn, %{\"section_id\" => section_id})\ndef create_blog_link(conn, params)\ndef edit_blog_link(conn, %{\"blog_link_id\" => id} = params)\ndef delete_blog_link(conn, %{\"blog_link_id\" => id})\ndef links(conn, %{\"page\" => page, \"filters\" => %{\"status\" => status} = params}) when status in [\"active\", \"archived\"]\ndef editor_links(conn, %{\"page\" => page, \"filters\" => params})\ndef notifs(conn, %{\"type\" => \"client\", \"page\" => page, \"filters\" => params})\ndef editor_notifs(conn, %{\"page\" => page, \"filters\" => params})\ndef send_notif(conn, params)\ndef authors(conn, %{\"post_id\" => post_id})\ndef create_author(conn, params)\ndef delete_author(conn, %{\"post_id\" => post_id, \"user_id\" => user_id})\n\n```",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "This folder contains `API` for external software and includes almost all the developed sections. This section uses Token in most “endpoints” to connect, and data send and receive are based on JSON.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:4001/api"
		},
		{
			"key": "testMailAddress",
			"value": "testmail@test.com"
		},
		{
			"key": "testPassword",
			"value": "TestUserPassword123"
		},
		{
			"key": "testUsername",
			"value": "testUser"
		},
		{
			"key": "testFullName",
			"value": "testName"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		},
		{
			"key": "categoryID",
			"value": ""
		},
		{
			"key": "postID",
			"value": "",
			"type": "string"
		},
		{
			"key": "postAliasLink",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentID",
			"value": "",
			"type": "string"
		}
	]
}